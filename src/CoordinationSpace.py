# Takes as input the obstacles and trajectory of a robot from the MSL library
# http://msl.cs.uiuc.edu/msl/

import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # @UnresolvedImport @UnusedImport
from heapq import heappush, heappop  # for priority queue

### Input Parameters ###
obstacleFilename = '2robotObstacles.txt'  # obstacles generated by MSL (remove trailing empty lines)
policyFilename = '2robotPolicies.txt'  # policy generated by MSL
robotSize = 1  # radius of robots, assumes robots are circular

### Global Variables ###

# Obstacles
obstacles = []

# Robots
# Each robot is represented by a trajectory
# Each trajectory is composed of a series of states
# Each state is composed of ([0] velocity, [1] x-coordinate, [2] y-coordinate, [3] orientation [0-2pi)
robots = []

# Coordination space
cSpace = []

### Functions ###

# Read files and split data by line
def readFile (filename):
    info = []
    with open(filename, 'r') as openFile:
        data = openFile.readlines()
        for line in data:
            info.append(line.split())
    return info

# Extract obstacles
def extractObstacles(info):
    # Each obstacle is a set of points on a line
    for line in info:
        points = []
        # Iterate over all points and add them to an array representing the obstacle
        for endpoint in line:
            point = []
            x, y = map(float, endpoint.strip('()').split(','))
            point.append(float(x))
            point.append(float(y))
            points.append(point)
        obstacles.append(points)

# Extract policy of each robot
def extractPolicies(info):
    for line in info:
        vs = line[0::4]  # velocities (every 4th element starting from 0)
        vs = [float(i) for i in vs]
        xs = line[1::4]  # x-coordinates (every 4th element starting from 1)
        xs = [float(i) for i in xs]
        ys = line[2::4]  # y-coordinates (every 4th element starting from 2)
        ys = [float(i) for i in ys]
        thetas = line[3::4]  # angles (every 4th element starting from 3)
        thetas = [float(i) for i in thetas]

        trajectory = []
        state = [vs[0], xs[0], ys[0], thetas[0], True]  # Assemble initial safe state
        trajectory.append(state)

        for i in range(1, len(vs)):  # Iterate over all other cases
            state = [vs[i], xs[i], ys[i], thetas[i]]  # Assemble each state
            trajectory.append(state)  # Append to create trajectory for each robot
        robots.append(trajectory)  # Add each robot trajectory to list of robots

# Define Coordination Space
def createMatrix():
    # Array holding the size of each dimension (given by number of states for each robot)
    n = []
    for robot in robots:
        n.append(len(robot))
    return createCoordinationSpace(n, 0, [])

# Recursively build n-dimensional array of ints, which represents the Coordination Space
# Input parameters are:
# n (array representing the size of each dimension),
# depth (the current dimension being generated)
# configuration (array representing the current set of states being generated/evaluated)
def createCoordinationSpace(n, depth, configuration):
    # Base case
    # Create the "last" dimensions for the nth robot
    # 0 if no collision, 1 if any robot in that state collides with any other robot in the same state
    if depth == len(n) - 1:
        array = []
        for i in xrange(0, n[depth]):
            configuration.append(i)
            # s = state, given by the position in configuration;
            collision = False
            # Check all collisions in the current state
            for A1 in range(len(configuration)):  # Loop through all states of robots A1, A2
                if collision == False:  # Prevent unnecessary loops
                    for A2 in range(A1 + 1, len(configuration)):
                            if checkCollisions(A1, configuration[A1], A2, configuration[A2]):
                                collision = True
            if collision:
                array.append(1)
            else:
                array.append(0)
            configuration.pop()  # Remove configuration that was just checked
        return array

    # Recursive case
    else:
        array = []
        # Recursively call function for each element in each dimension
        for i in xrange(0, n[depth]):
            # Add current dimension being generated to configuration
            configuration.append(i)
            array.append(createCoordinationSpace(n, depth + 1, configuration))
            configuration.pop()
        return array

# Check for collisions between two robots
def checkCollisions(A1, s1, A2, s2):
    # Treats each robot as a circle, and checks for an overlap between two circles
    # (if distance between circles is less than 2r)
    if ((robots[A1][s1][1] - robots[A2][s2][1]) ** 2 +
        (robots[A1][s1][2] - robots[A2][s2][2]) ** 2) ** 0.5 < 2 * robotSize:
        return True
    else:
        return False

# Plot the trajectories of each robot
def plotPaths():
    # Iterate over every state of every robot
    for idx, robot in enumerate(robots):
        xs = []
        ys = []
        for state in robot:
            xs.append(state[1])
            ys.append(state[2])
        plt.plot(xs, ys, label='Robot: ' + str(idx))

    # Iterate over every point in every obstacle
    for polygon in obstacles:
        polygon.append(polygon[0])
        xs = []
        ys = []
        for i in range(len(polygon)):
            xs.append(polygon[i][0])
            ys.append(polygon[i][1])
        plt.plot(xs, ys)

    plt.suptitle('Paths')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.legend()
    plt.show()

# Plot the 2D Coordination Space
def plot2DCoordinationSpace():
    xs = []
    ys = []

    pathXs = []
    pathYs = []

    # Iterate over every combination of states in Coordination Space
    for x in range(len(cSpace)):
        for y in range(len(cSpace[0])):
            if cSpace[x][y] == 1:
                xs.append(x)
                ys.append(y)
            elif cSpace[x][y] == 2:
                plt.scatter(x, y, color='green')
            elif cSpace[x][y] == 3:
                pathXs.append(x)
                pathYs.append(y)
            elif cSpace[x][y] == 4:
                plt.scatter(x, y, color='cyan')

    plt.scatter(xs, ys, color='blue')
    plt.scatter(pathXs, pathYs, color='red')
    plt.xlim([0, len(cSpace)])
    plt.ylim([0, len(cSpace[0])])

    plt.suptitle('2D Coordination Space')
    plt.xlabel('Robot 1')
    plt.ylabel('Robot 2')
    plt.show()

# Plot the 3D Coordination Space
def plot3DCoordinationSpace():
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    xs = []
    ys = []
    zs = []

    # Iterate over every combination of states in Coordination Space
    for x in range(len(cSpace)):
        for y in range(len(cSpace[x])):
            for z in range(len(cSpace[x][y])):
                if cSpace[x][y][z] == 1:
                    xs.append(x)
                    ys.append(y)
                    zs.append(z)

    ax.scatter(xs, ys, zs)
    ax.set_xlim3d(0, len(cSpace))
    ax.set_ylim3d(0, len(cSpace[0]))
    ax.set_zlim3d(0, len(cSpace[0][0]))

    plt.suptitle('3D Coordination Space')
    xLabel = ax.set_xlabel('Robot 1')
    yLabel = ax.set_ylabel('Robot 2')
    zLabel = ax.set_zlabel('Robot 3')
    plt.show()

# Print a 2D view of Configuration Space Matrix
def printCSpace():
    for i in cSpace:
        print i

def plotCSpace():
    if len(robots) == 2:
        plot2DCoordinationSpace()
    elif len(robots) == 3:
        plot3DCoordinationSpace()

# Return the length of the trajectory of a robot
def findTrajectoryLength(robot):
    trajectoryLength = 0
    prevX = robots[robot][0][1]
    prevY = robots[robot][0][2]

    # Iterate over all states and find the Euclidean distance between the two points
    # Return the sum of all of these distances
    for state in robots[robot]:  # This is going to check the 1st state against itself, which gives 0
        currX = state[1]
        currY = state[2]
        trajectoryLength += math.sqrt((currX - prevX) ** 2 + (currY - prevY) ** 2)
        prevX = currX
        prevY = currY
    return trajectoryLength

# TODO: this does a lot of the same work as findTrajectoryLength and can be combined
# TODO: this can also be combined with extractPolicies
def normalizeTrajectory(robot):
    time = 0.5  # Time interval between robot updates
    trajectoryLength = findTrajectoryLength(robot)

    # Interval length is given by floor of (length of trajectory / (robot speed * update interval time))
    intervals = math.floor(trajectoryLength / (robots[robot][0][0] * time))
    intervalLength = trajectoryLength / intervals  # length of each interval between updates
    distOldStates = 0
    distNewStates = 0

    prevX = robots[robot][0][1]
    prevY = robots[robot][0][2]

    newTrajectory = []

    for state in robots[robot]:
        currX = state[1]
        currY = state[2]
        distOldStates += math.sqrt((currX - prevX) ** 2 + (currY - prevY) ** 2)

        # For every state in robot trajectory, iterate
        # If distance between the current state and the start is larger than the
        # distance between the current normalized state and the start
        # then add the corresponding new state to the new normalized trajectory to "catch up" and
        # increase the distance of the new trajectory by one interval
        # then check again to see if another "new state" lies in the original interval
        while distOldStates > distNewStates:
            dX = currX - prevX
            dY = currY - prevY

            length = math.sqrt(dX ** 2 + dY ** 2)

            dX /= length
            dY /= length

            # Find the % of length that must be added to the new state starting from the last valid original state
            distance = distOldStates - distNewStates
            addDiff = length - distance

            dX *= addDiff
            dY *= addDiff

            newX = prevX + dX
            newY = prevY + dY

            newTrajectory.append([state[0], newX, newY, state[3]])
            distNewStates += intervalLength
        prevX = currX
        prevY = currY
    return newTrajectory

def normalizeAllTrajectories():
    for robot in range(len(robots)):
        robots[robot] = normalizeTrajectory(robot)

### Required Function Calls ####
extractObstacles(readFile(obstacleFilename))
extractPolicies(readFile(policyFilename))
normalizeAllTrajectories()
cSpace = createMatrix()

class node:
    xPos = 0  # x position
    yPos = 0  # y position
    distance = 0  # total distance already travelled to reach the node
    priority = 0  # priority = distance + remaining distance estimate
    def __init__(self, xPos, yPos, distance, priority):
        self.xPos = xPos
        self.yPos = yPos
        self.distance = distance
        self.priority = priority
    def __lt__(self, other):  # comparison method for priority queue
        return self.priority < other.priority
    def updatePriority(self, xDest, yDest):
        self.priority = self.distance + self.estimate(xDest, yDest) * 10  # A*
    # give higher priority to going straight instead of diagonally
    def nextMove(self, dirs, d):  # d: direction to move
        self.distance += 10
    # Estimation function for the remaining distance to the goal.
    def estimate(self, xDest, yDest):
        xd = xDest - self.xPos
        yd = yDest - self.yPos
        # Euclidian Distance
        d = math.sqrt(xd * xd + yd * yd)
        # Manhattan distance
        # d = abs(xd) + abs(yd)
        # Chebyshev distance
        # d = max(abs(xd), abs(yd))
        return(d)

# A-star algorithm.
# The path returned will be a string of digits of directions.
def pathFind(the_map, n, m, dirs, dx, dy, xA, yA, xB, yB):
    closed_nodes_map = []  # map of closed (tried-out) nodes
    open_nodes_map = []  # map of open (not-yet-tried) nodes
    dir_map = []  # map of dirs
    row = [0] * n
    for i in range(m):  # create 2d arrays
        closed_nodes_map.append(list(row))
        open_nodes_map.append(list(row))
        dir_map.append(list(row))

    pq = [[], []]  # priority queues of open (not-yet-tried) nodes
    pqi = 0  # priority queue index
    # create the start node and push into list of open nodes
    n0 = node(xA, yA, 0, 0)
    n0.updatePriority(xB, yB)
    heappush(pq[pqi], n0)
    open_nodes_map[yA][xA] = n0.priority  # mark it on the open nodes map

    # A* search
    while len(pq[pqi]) > 0:
        # get the current node w/ the highest priority
        # from the list of open nodes
        n1 = pq[pqi][0]  # top node
        n0 = node(n1.xPos, n1.yPos, n1.distance, n1.priority)
        x = n0.xPos
        y = n0.yPos
        heappop(pq[pqi])  # remove the node from the open list
        open_nodes_map[y][x] = 0
        closed_nodes_map[y][x] = 1  # mark it on the closed nodes map

        # quit searching when the goal is reached
        # if n0.estimate(xB, yB) == 0:
        if x == xB and y == yB:
            # generate the path from finish to start
            # by following the dirs
            path = ''
            while not (x == xA and y == yA):
                j = dir_map[y][x]
                c = str((j + dirs / 2) % dirs)
                path = c + path
                x += dx[j]
                y += dy[j]
            return path

        # generate moves (child nodes) in all possible dirs
        for i in range(dirs):
            xdx = x + dx[i]
            ydy = y + dy[i]
            if not (xdx < 0 or xdx > n - 1 or ydy < 0 or ydy > m - 1
                    or the_map[ydy][xdx] == 1 or closed_nodes_map[ydy][xdx] == 1):
                # generate a child node
                m0 = node(xdx, ydy, n0.distance, n0.priority)
                m0.nextMove(dirs, i)
                m0.updatePriority(xB, yB)
                # if it is not in the open list then add into that
                if open_nodes_map[ydy][xdx] == 0:
                    open_nodes_map[ydy][xdx] = m0.priority
                    heappush(pq[pqi], m0)
                    # mark its parent node direction
                    dir_map[ydy][xdx] = (i + dirs / 2) % dirs
                elif open_nodes_map[ydy][xdx] > m0.priority:
                    # update the priority
                    open_nodes_map[ydy][xdx] = m0.priority
                    # update the parent direction
                    dir_map[ydy][xdx] = (i + dirs / 2) % dirs
                    # replace the node
                    # by emptying one pq to the other one
                    # except the node to be replaced will be ignored
                    # and the new node will be pushed in instead
                    while not (pq[pqi][0].xPos == xdx and pq[pqi][0].yPos == ydy):
                        heappush(pq[1 - pqi], pq[pqi][0])
                        heappop(pq[pqi])
                    heappop(pq[pqi])  # remove the target node
                    # empty the larger size priority queue to the smaller one
                    if len(pq[pqi]) > len(pq[1 - pqi]):
                        pqi = 1 - pqi
                    while len(pq[pqi]) > 0:
                        heappush(pq[1 - pqi], pq[pqi][0])
                        heappop(pq[pqi])
                    pqi = 1 - pqi
                    heappush(pq[pqi], m0)  # add the better node instead
    return 'failed'  # if no route found

# MAIN
dirs = 8  # number of possible directions to move on the map
if dirs == 4:
    dx = [1, 0, -1, 0]
    dy = [0, 1, 0, -1]
elif dirs == 8:
    dx = [1, 1, 0, -1, -1, -1, 0, 1]
    dy = [0, 1, 1, 1, 0, -1, -1, -1]

the_map = cSpace
n = len(the_map[0])
m = len(the_map)

# select start and finish locations from a list
(xA, yA, xB, yB) = (0, 0, n - 1, m - 1)

print 'Map size (X,Y): ', n, m
print 'Start: ', xA, yA
print 'Finish: ', xB, yB
route = pathFind(the_map, n, m, dirs, dx, dy, xA, yA, xB, yB)
print 'Route:'
print route

# mark the route on the map
if len(route) > 0:
    x = xA
    y = yA
    the_map[y][x] = 2
    cSpace[y][x] = 2
    for i in range(len(route)):
        j = int(route[i])
        x += dx[j]
        y += dy[j]
        the_map[y][x] = 3
        cSpace[y][x] = 3
    the_map[y][x] = 4
    cSpace[y][x] = 4

# display the map with the route added
# print 'Map:'
# for y in range(m):
#     for x in range(n):
#         xy = the_map[y][x]
#         if xy == 0:
#             print '.',  # space
#         elif xy == 1:
#             print 'O',  # obstacle
#         elif xy == 2:
#             print 'S',  # start
#         elif xy == 3:
#             print 'R',  # route
#         elif xy == 4:
#             print 'F',  # finish
#     print

### Optional Function Calls Here ###
# plotPaths()
plotCSpace()

### Debug Function Calls Here ###
# printCSpace()
